syntax = "proto3";

package calculator;
option go_package="calculator/calculatorpb";

message Calculation{
    int64 first_number = 1;
    int64 second_number = 2;
}

message CalculatorRequest{
    // calculation might seem generic for a summing service, but this is extensible to future math operations by adding a new field in calculation
    Calculation Calculation = 1;
}

message CalculatorResponse{
    int64 result = 1;
}

message SquareRootRequest{
    int32 number = 1;
}

message SquareRootResponse{
    double number_root = 1;
}

message PrimeDecompositionRequest{
    int64 prime_number = 1;
}

message PrimeDecompositionResponse{
    int64 factor = 1;
}

message AverageRequest{
    int64 number = 1;
}

message AverageResponse{
    float result = 1;
}

message FindMaximumRequest{
    float next_number = 1;
}

message FindMaximumResponse{
    float current_max = 1;
}

service CalculatorService{
    //Unary
    rpc Calculate(CalculatorRequest) returns (CalculatorResponse){};

    //error handling
    //this rpc will throw an exception if the sent number is negative (we don't do imaginaries here)
    //the error is of type INVALID_ARGUMENT
    rpc SquareRoot(SquareRootRequest) returns (SquareRootResponse){};

    //Streaming
    rpc PrimeNumberDecomposition(PrimeDecompositionRequest) returns (stream PrimeDecompositionResponse){};

    //Client streaming
    rpc Average(stream AverageRequest) returns (AverageResponse){};

    //BIDI streaming
    rpc FindMaximum(stream FindMaximumRequest) returns (stream FindMaximumResponse){};
}